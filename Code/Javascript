var cardArray = new Array(52);//Array of custom card objects
var img = new Array(52);//Array of image items that display cards
var deck = new Array(52);//Deck of shuffled cardArray information
var trash = new Array();//Discard pile where the top card is the playable card
var drawDeck= new Array(24);
var playDeck = new Array(28);
var winNum = 0;

//Creation of all the custom objects that contain testing and dealing values
cardArray[0] = {url: "ace_of_hearts.png", rank: 1, compNum: null};
cardArray[1] = {url: "2_of_hearts.png", rank: 2, compNum: null};
cardArray[2] = {url: "3_of_hearts.png", rank: 3, compNum: null};
cardArray[3] = {url: "4_of_hearts.png", rank: 4, compNum: null};
cardArray[4] = {url: "5_of_hearts.png", rank: 5, compNum: null};
cardArray[5] = {url: "6_of_hearts.png", rank: 6, compNum: null};
cardArray[6] = {url: "7_of_hearts.png", rank: 7, compNum: null};
cardArray[7] = {url: "8_of_hearts.png", rank: 8, compNum: null};
cardArray[8] = {url: "9_of_hearts.png", rank: 9, compNum: null};
cardArray[9] = {url: "10_of_hearts.png", rank: 10, compNum: null};
cardArray[10] = {url: "jack_of_hearts2.png", rank: 11, compNum: null};
cardArray[11] = {url: "queen_of_hearts2.png", rank: 12, compNum: null};
cardArray[12] = {url: "king_of_hearts2.png", rank: 13, compNum: null};
cardArray[13] = {url: "ace_of_clubs.png", rank: 1, compNum: null};
cardArray[14] = {url: "2_of_clubs.png", rank: 2, compNum: null};
cardArray[15] = {url: "3_of_clubs.png", rank: 3, compNum: null};
cardArray[16] = {url: "4_of_clubs.png", rank: 4, compNum: null};
cardArray[17] = {url: "5_of_clubs.png", rank: 5, compNum: null};
cardArray[18] = {url: "6_of_clubs.png", rank: 6, compNum: null};
cardArray[19] = {url: "7_of_clubs.png", rank: 7, compNum: null};
cardArray[20] = {url: "8_of_clubs.png", rank: 8, compNum: null};
cardArray[21] = {url: "9_of_clubs.png", rank: 9, compNum: null};
cardArray[22] = {url: "10_of_clubs.png", rank: 10, compNum: null};
cardArray[23] = {url: "jack_of_clubs2.png", rank: 11, compNum: null};
cardArray[24] = {url: "queen_of_clubs2.png", rank: 12, compNum: null};
cardArray[25] = {url: "king_of_clubs2.png", rank: 13, compNum: null};
cardArray[26] = {url: "ace_of_diamonds.png", rank: 1, compNum: null};
cardArray[27] = {url: "2_of_diamonds.png", rank: 2, compNum: null};
cardArray[28] = {url: "3_of_diamonds.png", rank: 3, compNum: null};
cardArray[29] = {url: "4_of_diamonds.png", rank: 4, compNum: null};
cardArray[30] = {url: "5_of_diamonds.png", rank: 5, compNum: null};
cardArray[31] = {url: "6_of_diamonds.png", rank: 6, compNum: null};
cardArray[32] = {url: "7_of_diamonds.png", rank: 7, compNum: null};
cardArray[33] = {url: "8_of_diamonds.png", rank: 8, compNum: null};
cardArray[34] = {url: "9_of_diamonds.png", rank: 9, compNum: null};
cardArray[35] = {url: "10_of_diamonds.png", rank: 10, compNum: null};
cardArray[36] = {url: "jack_of_diamonds2.png", rank: 11, compNum: null};
cardArray[37] = {url: "queen_of_diamonds2.png", rank: 12, compNum: null};
cardArray[38] = {url: "king_of_diamonds2.png", rank: 13, compNum: null};
cardArray[39] = {url: "ace_of_spades.png", rank: 1, compNum: null};
cardArray[40] = {url: "2_of_spades.png", rank: 2, compNum: null};
cardArray[41] = {url: "3_of_spades.png", rank: 3, compNum: null};
cardArray[42] = {url: "4_of_spades.png", rank: 4, compNum: null};
cardArray[43] = {url: "5_of_spades.png", rank: 5, compNum: null};
cardArray[44] = {url: "6_of_spades.png", rank: 6, compNum: null};
cardArray[45] = {url: "7_of_spades.png", rank: 7, compNum: null};
cardArray[46] = {url: "8_of_spades.png", rank: 8, compNum: null};
cardArray[47] = {url: "9_of_spades.png", rank: 9, compNum: null};
cardArray[48] = {url: "10_of_spades.png", rank: 10, compNum: null};
cardArray[49] = {url: "jack_of_spades2.png", rank: 11, compNum: null};
cardArray[50] = {url: "queen_of_spades2.png", rank: 12, compNum: null};
cardArray[51] = {url: "king_of_spades2.png", rank: 13, compNum: null};

deck = shuffleDeck(cardArray); //return a shuffled array
//makePlayDeck(); //creates deck of cards for placement on table
//makeDrawDeck(); //creates the deck for drawing cards

//..............Game Functions.............//

//Takes deck of sorted cards, deals cards, and removes the play button
function play()
{
	makePlayDeck(); //creates deck of cards for placement on table
	makeDrawDeck(); //creates the deck for drawing cards
	gameTimer(); //starts timer
	
	var button = document.getElementById("play_div");
	var i;
	var j;
	var count = 0;
	var x_co;//x-coordinate value
	var y_co;//y-coordinate value
	var comp;//number used to compare for flipping
	
	
	//...............Dealing Algorithm...................
	//Each one of the following loops gives each image in the img array
	//a src, sets its attributes equal to that of the .card CSS class,
	//sets and increments its positioning, and the appends the image to
	//the webpage.
	
	
	//Bottom row deal
	x_co = 10;
	y_co = 251;
	comp = 11;
	
	for (i = 0; i <= 9; i++) {
		deck[i].compNum = comp;
		playDeck[i].style.position = "absolute";
		playDeck[i].style.left = x_co+'px';
		playDeck[i].style.top = y_co+'px';
		
		x_co = x_co+60;
		comp++;
		
		document.getElementById('layout').appendChild(playDeck[i]);
	}
	
	//Second row from bottom
	x_co = 41;
	y_co = 171;
	
	for (i = 10; i <= 18; i++) {
		playDeck[i].style.position = "absolute";
		playDeck[i].style.left = x_co+'px';
		playDeck[i].style.top = y_co+'px';
		
		x_co = x_co+60;
		
		document.getElementById('layout').appendChild(playDeck[i]);
	}
	
	//Third row from bottom
	x_co = 71;
	y_co = 91;
	
	for (i = 19; i <= 24; i++) {
		playDeck[i].style.position = "absolute";
		playDeck[i].style.left = x_co+'px';
		playDeck[i].style.top = y_co+'px';
		
		x_co = x_co+60;
		
		document.getElementById('layout').appendChild(playDeck[i]);
		
		count++;
		
		//Creates spacing after every 2 cards
		if(count % 2 == 0)
			x_co = x_co + 60;
	}
	
	//Top row
	x_co = 101;
	y_co = 11;
	
	for (i = 25; i <= 27; i++) {
		playDeck[i].style.position = "absolute";
		playDeck[i].style.left = x_co+'px';
		playDeck[i].style.top = y_co+'px';
		
		x_co = x_co+60;
		
		document.getElementById('layout').appendChild(playDeck[i]);
		
		count++;
		
		x_co = x_co + 120;
	}
	
	//Removes the play button
	button.parentNode.removeChild(button);
}

function replay() {
	var node = document.getElementById('layout');
	
	if(node.hasChildNodes())
	{
		alert(node.childNodes[1].src);
		node.removeChild(node.childNodes[1]);
	}
	
	play();
}

//Shuffles deck
function shuffleDeck(arr) {
	
	var temp;
	var i, k;
	
	for(i = 0; i < arr.length; i++)
	{
		//Math.random() chooses a number between 0 (inclusive) and 1 (exclusive)
		//This ensures that the floor of multiplying Math.random will never be
		//equal to, or greater than the length of the array
		k = Math.floor(Math.random() * arr.length);
		temp = arr[i];
		arr[i] = arr[k];
		arr[k] = temp;
	}
	
	return arr;
}

function makePlayDeck() {
	var i;
	
	for (i = 0; i <= 27; i++) {
		playDeck[i] = document.createElement("img");
		playDeck[i].src = deck[i].url;
		playDeck[i].setAttribute("class", "card");
	}
	
	assignClickEvent();
}

function assignClickEvent(){
	var i0 = 0;
	playDeck[0].addEventListener('click', function(){isPlayable(i0)}, false);
	
	var i1 = 1;
	playDeck[1].addEventListener('click', function(){isPlayable(i1)}, false);
	
	var i2 = 2;
	playDeck[2].addEventListener('click', function(){isPlayable(i2)}, false);
	
	var i3 = 3;
	playDeck[3].addEventListener('click', function(){isPlayable(i3)}, false);
	
	var i4 = 4;
	playDeck[4].addEventListener('click', function(){isPlayable(i4)}, false);
	
	var i5 = 5;
	playDeck[5].addEventListener('click', function(){isPlayable(i5)}, false);
	
	var i6 = 6;
	playDeck[6].addEventListener('click', function(){isPlayable(i6)}, false);
	
	var i7 = 7;
	playDeck[7].addEventListener('click', function(){isPlayable(i7)}, false);
	
	var i8 = 8;
	playDeck[8].addEventListener('click', function(){isPlayable(i8)}, false);
	
	var i9 = 9;
	playDeck[9].addEventListener('click', function(){isPlayable(i9)}, false);
	
	var i10 = 10;
	playDeck[10].addEventListener('click', function(){isPlayable(i10)}, false);
	
	var i11 = 11;
	playDeck[11].addEventListener('click', function(){isPlayable(i11)}, false);
	
	var i12 = 12;
	playDeck[12].addEventListener('click', function(){isPlayable(i12)}, false);
	
	var i13 = 13;
	playDeck[13].addEventListener('click', function(){isPlayable(i13)}, false);
	
	var i14 = 14;
	playDeck[14].addEventListener('click', function(){isPlayable(i14)}, false);
	
	var i15 = 15;
	playDeck[15].addEventListener('click', function(){isPlayable(i15)}, false);
	
	var i16 = 16;
	playDeck[16].addEventListener('click', function(){isPlayable(i16)}, false);
	
	var i17 = 17;
	playDeck[17].addEventListener('click', function(){isPlayable(i17)}, false);
	
	var i18 = 18;
	playDeck[18].addEventListener('click', function(){isPlayable(i18)}, false);
	
	var i19 = 19;
	playDeck[19].addEventListener('click', function(){isPlayable(i19)}, false);
	
	var i20 = 20;
	playDeck[20].addEventListener('click', function(){isPlayable(i20)}, false);
	
	var i21 = 21;
	playDeck[21].addEventListener('click', function(){isPlayable(i21)}, false);
	
	var i22 = 22;
	playDeck[22].addEventListener('click', function(){isPlayable(i22)}, false);
	
	var i23 = 23;
	playDeck[23].addEventListener('click', function(){isPlayable(i23)}, false);
	
	var i24 = 24;
	playDeck[24].addEventListener('click', function(){isPlayable(i24)}, false);
	
	var i25 = 25;
	playDeck[25].addEventListener('click', function(){isPlayable(i25)}, false);
	
	var i26 = 26;
	playDeck[26].addEventListener('click', function(){isPlayable(i26)}, false);
	
	var i27 = 27;
	playDeck[27].addEventListener('click', function(){isPlayable(i27)}, false);
}


function makeDrawDeck() {
	var i;
	var j = 28;
	
	for (i = 0; i <= 27; i++) {
		drawDeck[i] = deck[j];
		j++;
	}
}

function dealCard() {
	
	var currCard;
	var o;
	
	o = deck.pop();
	trash.push(o);
	
	currCard = document.createElement("img");
	currCard.src = trash[trash.length-1].url;
	currCard.setAttribute("class", "card");
	currCard.style.position = "absolute";
	currCard.style.top = 350+"px";
	currCard.style.left = 150+"px";
	
	document.getElementById('table').appendChild(currCard);
	
	if (deck.length == 0)
		document.getElementById('draw').style.display = 'none';
}

function isPlayable(deckVal) {
	
	var clickedRank = deck[deckVal].rank;
	
	switch(clickedRank){
		
		case 1:
			if(trash[trash.length-1].rank == 13 || trash[trash.length-1].rank == 2)
			{
				playCard(deckVal);
			}
			else
			{
				alert("Invalid play");
			}
		
			break;
		
		case 2:
			if(trash[trash.length-1].rank == 1 || trash[trash.length-1].rank == 3)
			{
				playCard(deckVal);
			}
			else
			{
				alert("Invalid play");
			}
		
			break;
			
		case 3:
			if(trash[trash.length-1].rank == 2 || trash[trash.length-1].rank == 4)
			{
				playCard(deckVal);
			}
			else
			{
				alert("Invalid play");
			}
		
			break;
			
		case 4:
			if(trash[trash.length-1].rank == 3 || trash[trash.length-1].rank == 5)
			{
				playCard(deckVal);
			}
			else
			{
				alert("Invalid play");
			}
		
			break;
			
		case 5:
			if(trash[trash.length-1].rank == 4 || trash[trash.length-1].rank == 6)
			{
				playCard(deckVal);
			}
			else
			{
				alert("Invalid play");
			}
		
			break;
			
		case 6:
			if(trash[trash.length-1].rank == 5 || trash[trash.length-1].rank == 7)
			{
				playCard(deckVal);
			}
			else
			{
				alert("Invalid play");
			}
		
			break;
			
		case 7:
			if(trash[trash.length-1].rank == 6 || trash[trash.length-1].rank == 8)
			{
				playCard(deckVal);
			}
			else
			{
				alert("Invalid play");
			}
		
			break;
			
		case 8:
			if(trash[trash.length-1].rank == 7 || trash[trash.length-1].rank == 9)
			{
				playCard(deckVal);
			}
			else
			{
				alert("Invalid play");
			}
		
			break;
		
		case 9:
			if(trash[trash.length-1].rank == 8 || trash[trash.length-1].rank == 10)
			{
				playCard(deckVal);
			}
			else
			{
				alert("Invalid play");
			}
		
			break;
		
		case 10:
			if(trash[trash.length-1].rank == 9 || trash[trash.length-1].rank == 11)
			{
				playCard(deckVal);
			}
			else
			{
				alert("Invalid play");
			}
		
			break;
		
		case 11:
			if(trash[trash.length-1].rank == 10 || trash[trash.length-1].rank == 12)
			{
				playCard(deckVal);
			}
			else
			{
				alert("Invalid play");
			}
		
			break;
		
		case 12:
			if(trash[trash.length-1].rank == 11 || trash[trash.length-1].rank == 13)
			{
				playCard(deckVal);
			}
			else
			{
				alert("Invalid play");
			}
		
			break;
		
		case 13:
			if(trash[trash.length-1].rank == 12 || trash[trash.length-1].rank == 1)
			{
				playCard(deckVal);
			}
			else
			{
				alert("Invalid play");
			}
		
			break;		
	}
}

function playCard(val) {
	var nextCard;
	var o = deck[val];
	
	playDeck[val].parentNode.removeChild(playDeck[val]);
	
	trash.push(o);
	nextCard = document.createElement("img");
	nextCard.src = trash[trash.length-1].url;
	nextCard.setAttribute("class", "card");
	nextCard.style.position = "absolute";
	nextCard.style.top = 350+"px";
	nextCard.style.left = 150+"px";
	
	document.getElementById('table').appendChild(nextCard);
	
	winNum++;
	
	if(winNum == 28)
	{
		alert("YOU WIN!!! Refresh the page to play again!");
	}
}

function countdown(timeLeft, show){
	var myTimer = timeLeft, minutes, seconds;
	var currTime;
	setInterval(function () {
		minutes = parseInt(myTimer / 60, 10);
		seconds = parseInt(myTimer % 60, 10);
		
		if(seconds < 10)
		{
			seconds = "0" + seconds;
		}
		
		currTime = minutes + ":" + seconds;
		show.textContent = currTime;
		
		myTimer -= 1;
		
	}, 1000);
}

 function gameTimer (){
	var twoThirty = 60 * 2.5; 
	var showTime = document.querySelector('#time'); 
	countdown(twoThirty, showTime);
}
